# "Базовые структуры данных."
#

import random

helloy = ('"Слишком древний шифр": \n'
          'Вы отправились в путешествие на необитаемый остров и конечно же в \n' +
          'очередной вылазке в джунгли вы попали в ловушку местному племени (да-да, классика "Индиана Джонса").\n' +
          ' К вашему удивлению, в племени были неплохие математики и по совместительству фантазёры. Вы поняли это, \n' +
          'когда после долгих блужданий перед вами появились ворота (выход из ловушки) с двумя каменными вставками для \n' +
          'чисел.В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.\n' +
          'К вашему счастью рядом с менее успешными и уже неговорящими путешествинниками находился попирус, \n' +
          'где были написаны правила для решения этого "ребуса". (Как жаль, что они поняли это так поздно :( ). \n' +
          'Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно сумме их значений. \n')

#
# Пример 1:
# 9 - число из первой вставки
# 1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)
#
# Пример 2:
# 11 - число из первой вставки
# 11029384756 - нужный пароль (1 и 10, 2 и 9, 3 и 8, 4 и 7, 5 и 6 - пары; число 11 кратно сумме каждой пары)
#

#
Notes = ('Примечания: \n' +
         # 'Можно использовать как цикл for, так и цикл while '+
         'Первое число не входит в одно из чисел пары\n' +
         'Пары чисел подбираются от 1 до 20 для текущего числа')

quest = ("К сожалению, у вас не так много времени, чтобы подбирать пароль вручную, \n" +
         "шипы сверху уже движуться на вас, тем более числа в первой вставке будут попадаться случайно.")

#
# Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20)
# программа выдавала нужный пароль result, для одного введённого числа.

result = "И так! Алгоритм готов и может спасти жизнь, не стоит терять время! "


def find_all_password(stone):
    str_out = ""
    for i in range(1, 21):
        for j in range(i + 1, 21):
            if stone % (i + j) == 0:
                # print(str(i) + " и " + str(j) + ", ", end=" ")
                str_out += str(i) + str(j)
    return str_out


def check_password():
    test_list = {3: 12, 4: 13, 5: 1423, 6: 121524, 7: 162534, 8: 13172635, 9: 1218273645, 10: 141923283746,
                 11: 11029384756, 12: 12131511124210394857, 13: 112211310495867, 14: 1611325212343114105968,
                 15: 1214114232133124115106978, 16: 1317115262143531341251161079, 17: 11621531441351261171089,
                 18: 12151811724272163631545414513612711810, 19: 118217316415514613712811910,
                 20: 13141911923282183731746416515614713812911}

    for k in range(3, 21):
        print(str(k), end="")
        test_result = test_list[k]
        find_result = find_all_password(k)
        if str(test_result) != find_result:
            print("Ошибка:")
            print(str(k), ": ", find_result)
            print(str(k), ":_", test_result)
            exit()
        else:
            print(": ok", end="")
            print(",", end=" ")
    print()


first_stone = random.randint(3, 20)

print(helloy)
print(Notes)
check_password()
print(result)
print(f"Первый камень показал число: {first_stone}")
print(f"Спасительный пароль: {find_all_password(first_stone)}")

